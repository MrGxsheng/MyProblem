LL d[70], p[70], cnt;
const int mod = 10086;
bool zero = false;
void init()
{
    cnt = 0;
    zero = false;
    memset(d, 0, sizeof(d));
    memset(p, 0, sizeof(p));
}
LL qpow(LL a, int p)
{
    LL res = 1;
    while (p)
    {
        if (p & 1)
            res = res * a % mod;
        a = a * a % mod;
        p >>= 1;
    }
    return res;
}
void insert(LL x)
{
    for (int i = 59; i >= 0; i--)
    {
        if (x >> i)
        {
            if (!p[i])
            {
                p[i] = x;
                return;
            }
            x ^= p[i];
        }
    }
    zero = true;
}
void rebuild()
{
    for (int i = 0; i <= 59; i++)
        for (int j = i - 1; j >= 0; j--)
            if (p[i] & (1LL << j))
                p[i] ^= p[j];
    for (int i = 0; i <= 59; i++)
        if (p[i])
            d[cnt++] = p[i];
}
LL ask_kmax(LL k)
{
    k -= zero;
    if (!k)
        return 0;
    if (k >= (1LL << cnt))
        return -1;
    LL res = 0;
    for (int i = 59; i >= 0; i--)
        if (k & (1LL << i))
            res ^= d[i];
    return res;
}
LL ask_kmin(LL k)
{
    k -= zero;
    if (!k)
        return 0;
    if (k >= (1LL << cnt))
        return -1;
    LL res = 0;
    for (int i = 0; i <= 59; i++)
        if (k & (1LL << i))
            res = res ^ d[i];
    return res;
}
LL ask_max()
{
    LL res = 0;
    for (int i = 59; i >= 0; i--)
        res = max(res, res ^ d[i]);
    return res;
}
LL ask_min()
{
    if (zero)
        return 0;
    for (int i = 0; i <= 59; i++)
        if (d[i])
            return d[i];
    return 0;
}
LL ask_firstX(int n, LL x)
{
    LL res = 0;
    for (int i = 0; i <= 59; i++)
        if (p[i])
            d[cnt++] = i;
    for (int i = 0; i < cnt; i++)
        if (x & (1LL << d[i]))
            (res += (1LL << i)) %= mod;
    res = ((res * qpow(1LL * 2, n - cnt) + 1) % mod) % mod;
    return res;
}
bool exist(LL x)
{
    for (int i = 59; i >= 0; i--)
    {
        if (x & (1 << i))
            x ^= p[i];
        if (!x)
            return true;
    }
    return false;
}                                          